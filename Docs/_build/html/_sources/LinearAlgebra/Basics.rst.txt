
Basic Linear Algebra
====================

In this notebook we explore the basic operations warped in pybind for
Linear Algebra. We will begin by showing vector operations. ### Vectors

.. code:: ipython3

    from math import sqrt
    %load_ext memory_profiler
    import sys
    sys.path.append('../../../Py/Build')
    from suite import *

We create two vector of length 2 and then we check that their length is
really two.

.. code:: ipython3

    a = vec(3)
    b = vec(3)
    (a.len(),b.len())




.. parsed-literal::

    (3, 3)



We now assign the value to vector from a list of consistent element
types, i.e. an array. We will also show how to assign only the value of
one entry and how to do operations between vectors.

.. code:: ipython3

    a.from_Array([1.0,0.0,0.0])
    a




.. parsed-literal::

    (1.000000,0.000000,0.000000)



.. code:: ipython3

    b[1]=1; b[2]=2; b[3]=1;
    b




.. parsed-literal::

    (1.000000,2.000000,1.000000)



.. code:: ipython3

    a-b




.. parsed-literal::

    (0.000000,-2.000000,-1.000000)



.. code:: ipython3

    c = a+b
    print(c)


.. parsed-literal::

    (2.000000,2.000000,1.000000)


.. code:: ipython3

    a*4.0




.. parsed-literal::

    (4.000000,0.000000,0.000000)



.. code:: ipython3

    2.0*b




.. parsed-literal::

    (2.000000,4.000000,2.000000)



.. code:: ipython3

    c= vec(3);
    c.from_Array([sqrt(2),sqrt(2),0.0])
    c.norm(2)




.. parsed-literal::

    2.0



.. code:: ipython3

    b.norm(0)




.. parsed-literal::

    2.0



We have also implemented the dot product.

.. code:: ipython3

    print(a)
    print(b)
    a*b


.. parsed-literal::

    (1.000000,0.000000,0.000000)
    (1.000000,2.000000,1.000000)




.. parsed-literal::

    1.0



Matrix
~~~~~~

.. code:: ipython3

    A = mat(3,3);
    A[1,1] = 1; A[2,2] = 2; A[3,3] = 3;
    A




.. parsed-literal::

    [1.000000,0.000000,0.000000]
    [0.000000,2.000000,0.000000]
    [0.000000,0.000000,3.000000]



.. code:: ipython3

    B = mat(3,3)
    B.from_Array([-2.0,0.0,0.0,  0.0,1.0,0.0,  0.0,0.0,1.0])
    B




.. parsed-literal::

    [-2.000000,0.000000,0.000000]
    [0.000000,1.000000,0.000000]
    [0.000000,0.000000,1.000000]



.. code:: ipython3

    A+B




.. parsed-literal::

    [-1.000000,0.000000,0.000000]
    [0.000000,3.000000,0.000000]
    [0.000000,0.000000,4.000000]



.. code:: ipython3

    A-B




.. parsed-literal::

    [3.000000,0.000000,0.000000]
    [0.000000,1.000000,0.000000]
    [0.000000,0.000000,2.000000]



.. code:: ipython3

    B*4.0




.. parsed-literal::

    [-8.000000,0.000000,0.000000]
    [0.000000,4.000000,0.000000]
    [0.000000,0.000000,4.000000]



.. code:: ipython3

    A = mat(3,3);
    A[1,1] = 1; A[2,2] = 2; A[3,3] = 3;
    b = vec(3)
    b.from_Array([1.0,2.0,1.0])
    print(A)
    print(b)
    %timeit A*b


.. parsed-literal::

    [1.000000,0.000000,0.000000]
    [0.000000,2.000000,0.000000]
    [0.000000,0.000000,3.000000]
    
    (1.000000,2.000000,1.000000)
    1.12 µs ± 58.5 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)


.. code:: ipython3

    A = mat(3,3);
    A[1,1] = 1; A[2,2] = 2; A[3,3] = 3;
    A[1,2] = 1;
    print(A)
    print(A.T())


.. parsed-literal::

    [1.000000,1.000000,0.000000]
    [0.000000,2.000000,0.000000]
    [0.000000,0.000000,3.000000]
    
    [1.000000,0.000000,0.000000]
    [1.000000,2.000000,0.000000]
    [0.000000,0.000000,3.000000]
    


.. code:: ipython3

    A = mat(3,3);
    A[1,1] = 1; A[2,2] = 2; A[3,3] = 3;
    A[1,2] = 1;
    B = mat(3,3);
    B[1,1] = 3; B[2,2] = 4; B[3,3] = 3;
    B[1,2] = 2;B[1,3] = 1;
    print(A)
    print(B)
    A*B


.. parsed-literal::

    [1.000000,1.000000,0.000000]
    [0.000000,2.000000,0.000000]
    [0.000000,0.000000,3.000000]
    
    [3.000000,2.000000,1.000000]
    [0.000000,4.000000,0.000000]
    [0.000000,0.000000,3.000000]
    




.. parsed-literal::

    [3.000000,6.000000,1.000000]
    [0.000000,8.000000,0.000000]
    [0.000000,0.000000,9.000000]



Linear Systems
~~~~~~~~~~~~~~

.. code:: ipython3

    A = mat(3,3);
    A.from_Array([1.0,1.0,1.0,   0.0,1.0,1.0,   0.0,0.0,1.0])
    A




.. parsed-literal::

    [1.000000,1.000000,1.000000]
    [0.000000,1.000000,1.000000]
    [0.000000,0.000000,1.000000]



.. code:: ipython3

    b = vec(3);
    b[1] = 1.0; b[2] = 2.0; b[3]=3.0;
    b




.. parsed-literal::

    (1.000000,2.000000,3.000000)



.. code:: ipython3

    L = LinSys(A,b);
    L.setType("UPPER")

.. code:: ipython3

    L.BackSub()




.. parsed-literal::

    (-1.000000,-1.000000,3.000000)



.. code:: ipython3

    A = mat(3,3);
    A.from_Array([1.0,0.0,0.0,   1.0,1.0,0.0,   1.0,1.0,1.0])
    print(A)
    print(b)
    L = LinSys(A,b);
    L.setType("LOWER")
    L.ForwardSub()


.. parsed-literal::

    [1.000000,0.000000,0.000000]
    [1.000000,1.000000,0.000000]
    [1.000000,1.000000,1.000000]
    


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-6-27368ea81ced> in <module>
          2 A.from_Array([1.0,0.0,0.0,   1.0,1.0,0.0,   1.0,1.0,1.0])
          3 print(A)
    ----> 4 print(b)
          5 L = LinSys(A,b);
          6 L.setType("LOWER")


    NameError: name 'b' is not defined


.. code:: ipython3

    A = mat(3,3);
    A.from_Array([3.0,1.0,6.0,   2.0,1.0,3.0,   1.0,1.0,1.0])
    b = vec(3);
    b[1] = 2.0; b[2] = 7.0; b[3]=4.0;
    L = LinSys(A,b);
    L




.. parsed-literal::

    [3.000000,1.000000,6.000000]
    [2.000000,1.000000,3.000000]
    [1.000000,1.000000,1.000000]
    
    (2.000000,7.000000,4.000000)



.. code:: ipython3

    L.Gauss(0)
    L


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-4-29655d07480f> in <module>
    ----> 1 L.Gauss(0)
          2 L


    NameError: name 'L' is not defined


.. code:: ipython3

    L.BackSub()




.. parsed-literal::

    (19.000000,-7.000000,-8.000000)



Remark
~~~~~~

We now have a look to the memory usage and to how the garbage collector
of Python is works with the deconstructor operator implemented in C++.
In particular when overloading mathematical operators if in the
deconstruction operator we deleted the content of the data pointers
problem occurs, therefore we implemented a free function to empty the
data pointer.

.. code:: ipython3

    from MemoryExamples import *

.. code:: ipython3

    %mprun -f ex1 ex1()


.. parsed-literal::

    


.. code:: ipython3

    %mprun -f ex2 ex2()


.. parsed-literal::

    


.. code:: ipython3

    %mprun -f ex3 ex3()


.. parsed-literal::

    


.. code:: ipython3

    %mprun -f ex4 ex4()


.. parsed-literal::

    

